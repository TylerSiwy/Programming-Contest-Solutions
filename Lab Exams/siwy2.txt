Lab Exam 2
Tyler Siwy
March 9, 2020


1.
a)Permutation of (x+y)/(2*r) objects
b)(20000/(2*r))*15
c) Pick one point, if point 2 falls within p1+r or p1-r then the location is invalid.
d) Linear scan the array, for each crane check condition from c.
e) Generate all permutations of the sample space given that they satisfy the check from d.
f) n^2

2.
a)500cents*100coins/2
50000/2=25000cents. Since the max is 50000 cents, if they divide perfectly then
each man would receive half of the max total.
b)
Base Cases
//If sum is 0, we have found the subset
if(sum == 0)
  return true;
//If no items are left or sum has become negative
if(n < 0|| sum < 0)
  return false;

//Recursive Call
if(f(n-1,sum-vi) || f(n-1, sum)){
  return true;
} else{
  return false;

c) We can generate a subset of coins which is nearest to half our total which
 will allow us to determine if there are multiple answers to the problem which
 is not allowed. We could save these results in an array and then access the
 final remainder to output should there be one.
d)O(n*m)

3.
a)Minimum Spanning Tree. Vertices would be the X,Y location of each freckle.
 Edges would be connections between the shortest distances. Edges are undirected
  and weight is the distance between the two nodes using pythagorean theorem
b) An adjacency matrix for all of the cities, and an array of pairs of all of
the edges which will index the arrays of cities.
c) Minimum total weight problem.
d) Kruskalâ€™s algorithm, O(mlogm)

4.
a) Directed Acyclic Graph. Each stick would be a vertex, with any other stick
 it's touching being an edge. Edges are unweighted and directed.
b) Adjacency List, since the nodes are only pointing to other nodes and don't
have a specific location within the space, we only need to use a list instead
of a matrix. Which would be used if we were concerned about distance between the nodes.
c) Shortest path in a directed acyclic graph.
d) Dijkstras, O(edges*vertices)
